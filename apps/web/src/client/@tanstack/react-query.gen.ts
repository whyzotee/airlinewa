// This file is auto-generated by @hey-api/openapi-ts

import { type Options, airportGetAirports, userUsers, authLogin, flightSearchFlight, paymentPayments, paymentCheckout, utilsTestEmail, utilsHealthCheck } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { AirportGetAirportsData, UserUsersData, AuthLoginData, AuthLoginError, FlightSearchFlightData, PaymentPaymentsData, PaymentPaymentsError, PaymentCheckoutData, PaymentCheckoutError, UtilsTestEmailData, UtilsTestEmailError, UtilsHealthCheckData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const airportGetAirportsQueryKey = (options?: Options<AirportGetAirportsData>) => createQueryKey('airportGetAirports', options);

export const airportGetAirportsOptions = (options?: Options<AirportGetAirportsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await airportGetAirports({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: airportGetAirportsQueryKey(options)
    });
};

export const userUsersQueryKey = (options?: Options<UserUsersData>) => createQueryKey('userUsers', options);

export const userUsersOptions = (options?: Options<UserUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userUsersQueryKey(options)
    });
};

export const authLoginQueryKey = (options: Options<AuthLoginData>) => createQueryKey('authLogin', options);

export const authLoginOptions = (options: Options<AuthLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authLoginQueryKey(options)
    });
};

export const authLoginMutation = (options?: Partial<Options<AuthLoginData>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<AuthLoginError>, Options<AuthLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const flightSearchFlightQueryKey = (options: Options<FlightSearchFlightData>) => createQueryKey('flightSearchFlight', options);

export const flightSearchFlightOptions = (options: Options<FlightSearchFlightData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await flightSearchFlight({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: flightSearchFlightQueryKey(options)
    });
};

export const paymentPaymentsQueryKey = (options: Options<PaymentPaymentsData>) => createQueryKey('paymentPayments', options);

export const paymentPaymentsOptions = (options: Options<PaymentPaymentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await paymentPayments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: paymentPaymentsQueryKey(options)
    });
};

export const paymentPaymentsMutation = (options?: Partial<Options<PaymentPaymentsData>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<PaymentPaymentsError>, Options<PaymentPaymentsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await paymentPayments({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const paymentCheckoutQueryKey = (options: Options<PaymentCheckoutData>) => createQueryKey('paymentCheckout', options);

export const paymentCheckoutOptions = (options: Options<PaymentCheckoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await paymentCheckout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: paymentCheckoutQueryKey(options)
    });
};

export const paymentCheckoutMutation = (options?: Partial<Options<PaymentCheckoutData>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<PaymentCheckoutError>, Options<PaymentCheckoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await paymentCheckout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const utilsTestEmailQueryKey = (options: Options<UtilsTestEmailData>) => createQueryKey('utilsTestEmail', options);

export const utilsTestEmailOptions = (options: Options<UtilsTestEmailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await utilsTestEmail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: utilsTestEmailQueryKey(options)
    });
};

export const utilsTestEmailMutation = (options?: Partial<Options<UtilsTestEmailData>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UtilsTestEmailError>, Options<UtilsTestEmailData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await utilsTestEmail({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const utilsHealthCheckQueryKey = (options?: Options<UtilsHealthCheckData>) => createQueryKey('utilsHealthCheck', options);

export const utilsHealthCheckOptions = (options?: Options<UtilsHealthCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await utilsHealthCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: utilsHealthCheckQueryKey(options)
    });
};